<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.
 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
using System;
using <%= namespace %>.Data;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.Data.Sqlite;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;

namespace <%= namespace %>.Infrastructure {
    public static class DatabaseConfiguration {
        public static IServiceCollection AddDatabaseModule(this IServiceCollection @this, IConfiguration configuration,
            IHostingEnvironment environment)
        {
            var entityFrameworkConfiguration = configuration.GetSection("EntityFramework");
            <%_ if (databaseType === 'sql') {
                if (devDatabaseType === prodDatabaseType) { _%>
            if (environment.IsDevelopment() || environment.IsProduction()) {
                    <%_ if (devDatabaseType === 'postgresql' && prodDatabaseType === 'postgresql') { _%>
                var connection = new NpgsqlConnection(new NpgsqlConnectionStringBuilder {
                        Host = entityFrameworkConfiguration["Host"],
                        Database = entityFrameworkConfiguration["Database"],
                        Username = entityFrameworkConfiguration["Username"],
                        Password = entityFrameworkConfiguration["Password"],
                    }.ConnectionString
                );

                @this.AddDbContext<ApplicationDatabaseContext>(context => { context.UseNpgsql(connection); });
                    <%_ } _%>
            }
                <%_ } else { _%>
            if (environment.IsDevelopment()) {
                    <%_ if (devDatabaseType === 'sqliteDisk' || devDatabaseType === 'sqliteMemory') { _%>
                var connection = new SqliteConnection(new SqliteConnectionStringBuilder {
                        DataSource = entityFrameworkConfiguration["DataSource"]
                    }.ConnectionString
                );

                @this.AddDbContext<ApplicationDatabaseContext>(context => { context.UseSqlite(connection); });
                    <%_ } _%>
            } else if (environment.IsProduction()) {
                    <%_ if (prodDatabaseType === 'postgresql') { _%>
                var connection = new NpgsqlConnection(new NpgsqlConnectionStringBuilder {
                        Host = entityFrameworkConfiguration["Host"],
                        Database = entityFrameworkConfiguration["Database"],
                        Username = entityFrameworkConfiguration["Username"],
                        Password = entityFrameworkConfiguration["Password"],
                    }.ConnectionString
                );

                @this.AddDbContext<ApplicationDatabaseContext>(context => { context.UseNpgsql(connection); });
                    <%_ } _%>
            }
                <%_ }
            } _%>

            return @this;
        }

        public static IApplicationBuilder UseApplicationDatabase(this IApplicationBuilder @this,
            IServiceProvider serviceProvider)
        {
            var context = serviceProvider.GetRequiredService<ApplicationDatabaseContext>();
            context.Database.OpenConnection();
            var dbCreated = context.Database.EnsureCreated();
            // When creating the database, insert users and roles
            if (dbCreated) {
                @this.UseApplicationIdentity(serviceProvider);
            }

            return @this;
        }
    }
}
